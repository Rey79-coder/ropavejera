{"version":3,"sources":["assets/spinner.gif","assets/about-us.jpg","assets/hero-banner.gif","utils/helpers.js","utils/reducers.js","utils/actions.js","utils/GlobalState.js","components/ProductItem/index.js","utils/queries.js","components/ProductList/index.js","components/CategoryMenu/index.js","components/Jumbotron/index.js","components/Banner/index.js","components/CartItem/index.js","utils/auth.js","components/Cart/index.js","pages/Home.js","pages/Detail.js","pages/NoMatch.js","utils/mutations.js","pages/Login.js","pages/Signup.js","components/Nav/index.js","pages/OrderHistory.js","pages/Success.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","idbPromise","storeName","method","object","Promise","resolve","reject","db","tx","store","request","window","indexedDB","open","onupgradeneeded","e","result","createObjectStore","keyPath","onerror","console","log","onsuccess","transaction","objectStore","put","all","getAll","delete","_id","oncomplete","close","reducer","state","action","type","products","currentCategory","categories","cartOpen","cart","product","newState","filter","length","map","purchaseQuantity","StoreContext","createContext","Provider","StoreProvider","value","initialState","props","useReducer","dispatch","useStoreContext","useContext","ProductItem","item","image","name","price","quantity","className","to","alt","src","count","pluralize","onClick","itemInCart","find","cartItem","parseInt","QUERY_PRODUCTS","gql","QUERY_CATEGORIES","QUERY_USER","QUERY_CHECKOUT","ProductList","useQuery","loading","data","useEffect","forEach","then","category","key","spinner","CategoryMenu","categoryData","id","Jumbotron","children","style","height","clear","paddingTop","textAlign","aboutUsBanner","Banner","heroBanner","CartItem","placeholder","onChange","target","role","aria-label","removeFromCart","decode","this","getToken","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","idToken","setItem","location","assign","removeItem","stripePromise","loadStripe","Cart","useLazyQuery","getCheckout","toggleCart","a","getCart","res","redirectToCheckout","sessionId","checkout","session","sum","toFixed","calculateTotal","Auth","loggedIn","productIds","i","push","variables","Home","Detail","useParams","useState","currentProduct","setCurrentProduct","indexedProducts","description","disabled","p","NoMatch","LOGIN","ADD_ORDER","ADD_USER","Login","email","password","formState","setFormState","useMutation","login","error","handleFormSubmit","event","preventDefault","mutationResponse","handleChange","onSubmit","htmlFor","Signup","addUser","firstName","lastName","Nav","href","logout","OrderHistory","user","orders","order","purchaseDate","toLocaleDateString","index","Success","addOrder","setTimeout","saveOrder","httpLink","createHttpLink","uri","authLink","setContext","_","headers","authorization","client","ApolloClient","link","concat","cache","InMemoryCache","App","ApolloProvider","exact","path","component","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.cdcb7258.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/spinner.ab497855.gif\";","module.exports = __webpack_public_path__ + \"static/media/about-us.5e6b573f.jpg\";","module.exports = __webpack_public_path__ + \"static/media/hero-banner.eb670d4e.gif\";","export function pluralize(name, count) {\n  if (count === 1) {\n    return name\n  }\n  return name + 's'\n}\n// STEP 1 : CREATE A PROMISE TO STORE DATA WHEN IT'S OFFLINE\nexport function idbPromise(storeName, method, object) {\n  return new Promise((resolve, reject) => {\n    // open connection to the database `sday` with the version of 1\n    const request = window.indexedDB.open('sday', 1);\n\n    // create variables to hold reference to the database, transaction (tx), and object store\n    let db, tx, store;\n\n    // if version has changed (or if this is the first time using the database), run this method and create the three object stores \n    request.onupgradeneeded = function (e) {\n      const db = request.result;\n      // create object store for each type of data and set \"primary\" key index to be the `_id` of the data\n      db.createObjectStore('products', { keyPath: '_id' });\n      db.createObjectStore('categories', { keyPath: '_id' });\n      db.createObjectStore('cart', { keyPath: '_id' });\n    };\n\n    // handle any errors with connecting\n    request.onerror = function (e) {\n      console.log('There was an error');\n    };\n\n    //ADD the actual functionality for us to make a transaction with the database\n    // on database open success\n    request.onsuccess = function (e) {\n      // save a reference of the database to the `db` variable\n      db = request.result;\n      // open a transaction do whatever we pass into `storeName` (must match one of the object store names)\n      tx = db.transaction(storeName, 'readwrite');\n      // save a reference to that object store\n      store = tx.objectStore(storeName);\n\n      // if there's any errors, let us know\n      db.onerror = function (e) {\n        console.log('error', e);\n      };\n\n      // TO CHECK which value we passed into the function as a method\n      switch (method) {\n        case 'put':\n          store.put(object);\n          resolve(object);\n          break;\n        case 'get':\n          const all = store.getAll();\n          all.onsuccess = function() {\n            resolve(all.result);\n          };\n          break;\n        case 'delete':\n          store.delete(object._id);\n          break;\n        default:\n          console.log('No valid method');\n          break;\n      }\n\n      // when the transaction is complete, close the connection\n      tx.oncomplete = function () {\n        db.close();\n      };\n    };\n  });\n}","import { useReducer } from 'react';\n\nimport {\n    UPDATE_PRODUCTS,\n    UPDATE_CATEGORIES,\n    UPDATE_CURRENT_CATEGORY,\n    ADD_TO_CART,\n    ADD_MULTIPLE_TO_CART,\n    REMOVE_FROM_CART,\n    UPDATE_CART_QUANTITY,\n    CLEAR_CART,\n    TOGGLE_CART\n} from './actions';\n\nexport const reducer = (state, action) => {\n    switch (action.type) {\n        // if action type value is the value of `UPDATE_PRODUCTS`, return a new state object with an updated products array\n        case UPDATE_PRODUCTS:\n            return {\n                ...state,\n                products: [...action.products]\n            };\n\n        // TO UPDATE make sure it's just above the default\n        case UPDATE_CURRENT_CATEGORY:\n            return {\n                ...state,\n                currentCategory: action.currentCategory\n            };\n\n        // if action type value is the value of `UPDATE_CATEGORIES`, return a new state object with an updated categories array\n        case UPDATE_CATEGORIES:\n            return {\n                ...state,\n                categories: [...action.categories]\n            };\n\n        case ADD_TO_CART:\n            return {\n                ...state,\n                cartOpen: true,\n                cart: [...state.cart, action.product]\n            };\n\n        case ADD_MULTIPLE_TO_CART:\n            return {\n                ...state,\n                cart: [...state.cart, ...action.products],\n            };\n\n        case REMOVE_FROM_CART:\n            let newState = state.cart.filter(product => {\n                return product._id !== action._id;\n            });\n\n            return {\n                ...state,\n                cartOpen: newState.length > 0,\n                cart: newState\n            };\n\n        case UPDATE_CART_QUANTITY:\n            return {\n                ...state,\n                cartOpen: true,\n                cart: state.cart.map(product => {\n                    if (action._id === product._id) {\n                        product.purchaseQuantity = action.purchaseQuantity;\n                    }\n                    return product;\n                })\n            };\n\n        case CLEAR_CART:\n            return {\n                ...state,\n                cartOpen: false,\n                cart: []\n            };\n\n        case TOGGLE_CART:\n            return {\n                ...state,\n                cartOpen: !state.cartOpen\n            };\n        default:\n            return state;\n    }\n};\n\n// set up a function that will know how to take in our state and update\nexport function useProductReducer(initialState) {\n    return useReducer(reducer, initialState);\n}","export const UPDATE_PRODUCTS = \"UPDATE_PRODUCTS\";\nexport const UPDATE_CATEGORIES = \"UPDATE_CATEGORIES\";\nexport const UPDATE_CURRENT_CATEGORY = \"UPDATE_CURRENT_CATEGORY\";\n// add to the global state are an array for the cart items\nexport const ADD_TO_CART = 'ADD_TO_CART';\nexport const ADD_MULTIPLE_TO_CART = 'ADD_MULTIPLE_TO_CART';\nexport const REMOVE_FROM_CART = 'REMOVE_FROM_CART';\nexport const UPDATE_CART_QUANTITY = 'UPDATE_CART_QUANTITY';\nexport const CLEAR_CART = 'CLEAR_CART';\nexport const TOGGLE_CART = 'TOGGLE_CART';","import React, { createContext, useContext } from \"react\";\nimport { useProductReducer } from './reducers';\n\n// TO instantiate the global state object:\nconst StoreContext = createContext();\nconst { Provider } = StoreContext;\n\n// Use Context Object for Global State\nconst StoreProvider = ({ value = [], ...props }) => {\n    const [state, dispatch] = useProductReducer({\n      products: [],\n      cart: [],\n      cartOpen: false,\n      categories: [],\n      currentCategory: '',\n    });\n    // use this to confirm it works!\n    console.log(state);\n    return <Provider value={[state, dispatch]} {...props} />;\n  };\n\n  const useStoreContext = () => {\n    return useContext(StoreContext);\n  };\n\n  export { StoreProvider, useStoreContext };","// THE HOMEPAGE OF the actual \"Add to cart\"\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { pluralize } from \"../../utils/helpers\"\n\nimport { useStoreContext } from '../../utils/GlobalState';\nimport { ADD_TO_CART, UPDATE_CART_QUANTITY } from '../../utils/actions';\n\nimport { idbPromise } from \"../../utils/helpers\";\n\nfunction ProductItem(item) {\n  const {\n    image,\n    name,\n    _id,\n    price,\n    quantity\n  } = item;\n\n  const [state, dispatch] = useStoreContext();\n\n  const { cart } = state;\n\n  const addToCart = () => {\n    // find the cart item with the matching id\n    const itemInCart = cart.find((cartItem) => cartItem._id === _id);\n    // if there was a match, call UPDATE with a new purchase quantity\n    if (itemInCart) {\n      dispatch({\n        type: UPDATE_CART_QUANTITY,\n        _id: _id,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n      });\n\n      idbPromise('cart', 'put', {\n        ...itemInCart,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n      });\n\n    } else {\n      dispatch({\n        type: ADD_TO_CART,\n        product: { ...item, purchaseQuantity: 1 }\n      });\n      \n      idbPromise('cart', 'put', { ...item, purchaseQuantity: 1 });\n    }\n  };\n\n  return (\n    <div className=\"card px-1 py-1\">\n      <Link to={`/products/${_id}`}>\n        <img\n          alt={name}\n          src={`/images/${image}`}\n        />\n        <p>{name}</p>\n      </Link>\n      <div>\n        <div>{quantity} {pluralize(\"item\", quantity)} in stock</div>\n        <span>${price}</span>\n      </div>\n      <button onClick={addToCart}>Add to cart</button>\n    </div>\n  );\n}\n\nexport default ProductItem;\n","import { gql } from '@apollo/client';\n\nexport const QUERY_PRODUCTS = gql`\n  query getProducts($category: ID) {\n    products(category: $category) {\n      _id\n      name\n      description\n      price\n      quantity\n      image\n      category {\n        _id\n      }\n    }\n  }\n`;\n\nexport const QUERY_ALL_PRODUCTS = gql`\n  {\n    products {\n      _id\n      name\n      description\n      price\n      quantity\n      category {\n        name\n      }\n    }\n  }\n`;\n\nexport const QUERY_CATEGORIES = gql`\n  {\n    categories {\n      _id\n      name\n    }\n  }\n`;\n\nexport const QUERY_USER = gql`\n  {\n    user {\n      firstName\n      lastName\n      orders {\n        _id\n        purchaseDate\n        products {\n          _id\n          name\n          description\n          price\n          quantity\n          image\n        }\n      }\n    }\n  }\n`;\n\nexport const QUERY_CHECKOUT = gql`\n  query getCheckout($products: [ID]!) {\n    checkout(products: $products) {\n      session\n    }\n  }\n`;","import React, { useEffect } from 'react';\nimport { useQuery } from '@apollo/client';\n\nimport ProductItem from '../ProductItem';\nimport { QUERY_PRODUCTS } from '../../utils/queries';\nimport spinner from '../../assets/spinner.gif';\n\nimport { useStoreContext } from '../../utils/GlobalState';\nimport { UPDATE_PRODUCTS } from '../../utils/actions';\n\n//STEP 2: IMPORT the idbPromise() functionality\nimport { idbPromise } from \"../../utils/helpers\"; \n\nfunction ProductList() {\n\nconst [state, dispatch] = useStoreContext();\n\nconst { currentCategory } = state;\n\nconst { loading, data } = useQuery(QUERY_PRODUCTS);\n\n//STEP 3: update the useEffect() Hook in this component\nuseEffect(() => {\n  // if there's data to be stored\n  if (data) {\n    // let's store it in the global state object\n    dispatch({\n      type: UPDATE_PRODUCTS,\n      products: data.products\n    });\n\n    // but let's also take each product and save it to IndexedDB using the helper function \n    data.products.forEach((product) => {\n      idbPromise('products', 'put', product);\n    });\n\n   // add else if to check if `loading` is undefined in `useQuery()` Hook\n  } else if (!loading) {\n    // since we're offline, get all of the data from the `products` store\n    idbPromise('products', 'get').then((products) => {\n      // use retrieved data to set global state for offline browsing\n      dispatch({\n        type: UPDATE_PRODUCTS,\n        products: products\n      });\n    });\n  }\n}, [data, loading, dispatch]);\n\n\n\nfunction filterProducts() {\n  if (!currentCategory) {\n    return state.products;\n  }\n\n  return state.products.filter(product => product.category._id === currentCategory);\n}\n\n  return (\n    <div className=\"my-2\">\n      <h2>Our Products:</h2>\n      {state.products.length ? (\n        <div className=\"flex-row\">\n          {filterProducts().map((product) => (\n            <ProductItem\n              key={product._id}\n              _id={product._id}\n              image={product.image}\n              name={product.name}\n              price={product.price}\n              quantity={product.quantity}\n            />\n          ))}\n        </div>\n      ) : (\n        <h3>You haven't added any products yet!</h3>\n      )}\n      {loading ? <img src={spinner} alt=\"loading\" /> : null}\n    </div>\n  );\n}\n\nexport default ProductList;\n","import React, { useEffect } from 'react';\nimport { useQuery } from '@apollo/client';\nimport { QUERY_CATEGORIES } from '../../utils/queries';\nimport { useStoreContext } from \"../../utils/GlobalState\";\nimport { UPDATE_CATEGORIES, UPDATE_CURRENT_CATEGORY } from '../../utils/actions';\n\nimport { idbPromise } from '../../utils/helpers';\n\n\nfunction CategoryMenu() {\n\n  const [state, dispatch] = useStoreContext();\n\n  const { categories } = state;\n\n  const { loading, data: categoryData } = useQuery(QUERY_CATEGORIES);\n\n  useEffect(() => {\n    // if categoryData exists or has changed from the response of useQuery, then run dispatch()\n    if (categoryData) {\n      dispatch({\n        type: UPDATE_CATEGORIES,\n        categories: categoryData.categories\n      });\n      categoryData.categories.forEach(category => {\n        idbPromise('categories', 'put', category);\n      });\n    } else if (!loading) {\n      idbPromise('categories', 'get').then(categories => {\n        dispatch({\n          type: UPDATE_CATEGORIES,\n          categories: categories\n        });\n      });\n    }\n  }, [categoryData, loading, dispatch]);\n\n\n\n  const handleClick = id => {\n    dispatch({\n      type: UPDATE_CURRENT_CATEGORY,\n      currentCategory: id\n    });\n  };\n\n  return (\n    <div>\n      <h2>Choose a Category:</h2>\n      {categories.map(item => (\n        <button\n          key={item._id}\n          onClick={() => {\n            handleClick(item._id);\n          }}\n        >\n          {item.name}\n        </button>\n      ))}\n    </div>\n  );\n}\n\nexport default CategoryMenu;\n","import React from \"react\";\nimport aboutUsBanner from '../../assets/about-us.jpg';\n\nfunction Jumbotron({ children }) {\n  return (\n    <div\n      style={{ height: 560, clear: \"both\", paddingTop: 120, textAlign: \"center\" }}\n    >\n      <img src={ aboutUsBanner } alt=\"\" />\n    </div>\n  );\n}\n\nexport default Jumbotron;","import React from \"react\";\n// import Auth from \"../../utils/auth\";\n// import { Link } from \"react-router-dom\";\nimport heroBanner from '../../assets/hero-banner.gif';\n\n\nfunction Banner () {\n\n  return (\n      <div>\n        <img src={ heroBanner } alt=\"\" />\n        </div>\n  );\n}\n\nexport default Banner;\n","import React from 'react';\nimport { useStoreContext } from '../../utils/GlobalState';\nimport { REMOVE_FROM_CART, UPDATE_CART_QUANTITY } from '../../utils/actions';\n\nimport { idbPromise } from \"../../utils/helpers\";\n\nconst CartItem = ({ item }) => {\n    const [, dispatch] = useStoreContext();\n\n    const removeFromCart = item => {\n        dispatch({\n          type: REMOVE_FROM_CART,\n          _id: item._id\n        });\n        idbPromise('cart', 'delete', { ...item });\n      };\n\n    const onChange = (e) => {\n        const value = e.target.value;\n\n        if (value === '0') {\n            dispatch({\n                type: REMOVE_FROM_CART,\n                _id: item._id\n            });\n\n            idbPromise('cart', 'delete', { ...item });\n\n        } else {\n            dispatch({\n                type: UPDATE_CART_QUANTITY,\n                _id: item._id,\n                purchaseQuantity: parseInt(value)\n            });\n\n            idbPromise('cart', 'put', { ...item, purchaseQuantity: parseInt(value) });\n        }\n    };\n\n    return (\n        <div className=\"flex-row\">\n            <div>\n                <img\n                    src={`/images/${item.image}`}\n                    alt=\"\"\n                />\n            </div>\n            <div>\n                <div>{item.name}, ${item.price}</div>\n                <div>\n                    <span>Qty:</span>\n                    <input\n                        type=\"number\"\n                        placeholder=\"1\"\n                        value={item.purchaseQuantity}\n                        onChange={onChange}\n                    />\n                    <span\n                        role=\"img\"\n                        aria-label=\"trash\"\n                        onClick={() => removeFromCart(item)}\n                    >\n                        🗑️\n                    </span>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default CartItem;","import decode from 'jwt-decode';\n\nclass AuthService {\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  loggedIn() {\n    // Checks if there is a saved token and it's still valid\n    const token = this.getToken();\n    return !!token && !this.isTokenExpired(token);\n  }\n\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n      if (decoded.exp < Date.now() / 1000) {\n        return true;\n      } else return false;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  getToken() {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem('id_token');\n  }\n\n  login(idToken) {\n    // Saves user token to localStorage\n    localStorage.setItem('id_token', idToken);\n\n    window.location.assign('/');\n  }\n\n  logout() {\n    // Clear user token and profile data from localStorage\n    localStorage.removeItem('id_token');\n    // this will reload the page and reset the state of the application\n    window.location.assign('/');\n  }\n}\n\nexport default new AuthService();\n","import React, { useEffect } from \"react\";\nimport CartItem from '../CartItem';\nimport Auth from '../../utils/auth';\nimport './style.css';\n\nimport { useStoreContext } from '../../utils/GlobalState';\nimport { TOGGLE_CART, ADD_MULTIPLE_TO_CART } from \"../../utils/actions\";\nimport { idbPromise } from \"../../utils/helpers\";\n\n// STRIPE PAYMENT\nimport { QUERY_CHECKOUT } from '../../utils/queries';\nimport { loadStripe } from '@stripe/stripe-js';\nimport { useLazyQuery } from '@apollo/client';\n\nconst stripePromise = loadStripe('pk_test_TYooMQauvdEDq54NiTphI7jx');\n\nconst Cart = () => {\n  const [state, dispatch] = useStoreContext();\n  const [getCheckout, { data }] = useLazyQuery(QUERY_CHECKOUT);\n\n  // Retrieve Items in the Cart\n  useEffect(() => {\n    async function getCart() {\n      const cart = await idbPromise('cart', 'get');\n      dispatch({ type: ADD_MULTIPLE_TO_CART, products: [...cart] });\n    };\n\n    if (!state.cart.length) {\n      getCart();\n    }\n  }, [state.cart.length, dispatch]);\n\n    // second useEffect() Hook specifically for Stripe\n    useEffect(() => {\n      if (data) {\n        stripePromise.then((res) => {\n          res.redirectToCheckout({ sessionId: data.checkout.session });\n        });\n      }\n    }, [data]);\n\n  console.log(state)\n\n  function toggleCart() {\n    dispatch({ type: TOGGLE_CART });\n  }\n\n  function calculateTotal() {\n    let sum = 0;\n    state.cart.forEach(item => {\n      sum += item.price * item.purchaseQuantity;\n    });\n    return sum.toFixed(2);\n  }\n\n  if (!state.cartOpen) {\n    return (\n      <div className=\"cart-closed\" onClick={toggleCart}>\n        <span\n          role=\"img\"\n          aria-label=\"trash\">🛒</span>\n      </div>\n    );\n  }\n\n  function submitCheckout() {\n    const productIds = [];\n    state.cart.forEach((item) => {\n      for (let i = 0; i < item.purchaseQuantity; i++) {\n        productIds.push(item._id);\n      }\n    });\n\n    getCheckout({\n      variables: { products: productIds }\n    });\n  }\n\n  return (\n    <div className=\"cart\">\n      <div className=\"close\" onClick={toggleCart}>[close]</div>\n      <h2>Shopping Cart</h2>\n      {state.cart.length ? (\n        <div>\n          {state.cart.map(item => (\n            <CartItem key={item._id} item={item} />\n          ))}\n          <div className=\"flex-row space-between\">\n            <strong>Total: ${calculateTotal()}</strong>\n            {\n              Auth.loggedIn() ?\n                <button onClick={submitCheckout}>\n                  Checkout\n                </button>\n                :\n                <span>(log in to check out)</span>\n            }\n          </div>\n        </div>\n      ) : (\n        <h3>\n          <span role=\"img\" aria-label=\"shocked\">\n            😱\n          </span>\n          You haven't added anything to your cart yet!\n        </h3>\n      )}\n    </div>\n  );\n};\n\nexport default Cart;","import React from \"react\";\nimport ProductList from \"../components/ProductList\";\nimport CategoryMenu from \"../components/CategoryMenu\";\nimport Jumbotron from \"../components/Jumbotron\";\nimport Banner from \"../components/Banner\"\nimport Cart from '../components/Cart';\n// import Footer from '../components/Footer'\n\nconst Home = () => {\n  return (\n    <div className=\"container\">\n      <Banner />    \n      <CategoryMenu />\n      <ProductList />\n      <Jumbotron />\n      <Cart />\n    </div>\n  );\n};\n\nexport default Home;\n","import React, { useEffect, useState } from 'react';\nimport { Link, useParams } from 'react-router-dom';\nimport { useQuery } from '@apollo/client';\n\nimport { QUERY_PRODUCTS } from '../utils/queries';\nimport spinner from '../assets/spinner.gif';\nimport { useStoreContext } from \"../utils/GlobalState\";\n\n// ADD TO CART FUNCTION\nimport {\n  REMOVE_FROM_CART,\n  UPDATE_CART_QUANTITY,\n  ADD_TO_CART,\n  UPDATE_PRODUCTS,\n} from '../utils/actions';\n\nimport Cart from '../components/Cart';\n\nimport { idbPromise } from \"../utils/helpers\";\n\n\nfunction Detail() {\n\n  const [state, dispatch] = useStoreContext();\n  const { id } = useParams();\n\n  const [currentProduct, setCurrentProduct] = useState({})\n\n  const { loading, data } = useQuery(QUERY_PRODUCTS);\n\n  const { products, cart } = state;\n\n\n  const addToCart = () => {\n    const itemInCart = cart.find((cartItem) => cartItem._id === id);\n\n    if (itemInCart) {\n      dispatch({\n        type: UPDATE_CART_QUANTITY,\n        _id: id,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n      });\n      \n      // Implement Shopping Cart Storage\n      // if we're updating quantity, use existing item data and increment purchaseQuantity value by one\n      idbPromise('cart', 'put', {\n        ...itemInCart,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n      });\n\n    } else {\n      dispatch({\n        type: ADD_TO_CART,\n        product: { ...currentProduct, purchaseQuantity: 1 }\n      });\n\n      // if product isn't in the cart yet, add it to the current shopping cart in IndexedDB\n      idbPromise('cart', 'put', { ...currentProduct, purchaseQuantity: 1 });\n    }\n  };\n\n  const removeFromCart = () => {\n    dispatch({\n      type: REMOVE_FROM_CART,\n      _id: currentProduct._id\n    });\n    // upon removal from cart, delete the item from IndexedDB using the `currentProduct._id` to locate what to remove\n  idbPromise('cart', 'delete', { ...currentProduct });\n  };\n\n  useEffect(() => {\n    // already in global store\n    if (products.length) {\n      setCurrentProduct(products.find(product => product._id === id));\n    }\n    // retrieved from server\n    else if (data) {\n      dispatch({\n        type: UPDATE_PRODUCTS,\n        products: data.products\n      });\n\n      data.products.forEach((product) => {\n        idbPromise('products', 'put', product);\n      });\n    }\n    // get cache from idb\n    else if (!loading) {\n      idbPromise('products', 'get').then((indexedProducts) => {\n        dispatch({\n          type: UPDATE_PRODUCTS,\n          products: indexedProducts\n        });\n      });\n    }\n  }, [products, data, loading, dispatch, id]);\n\n  return (\n    <>\n      {currentProduct ? (\n        <div className=\"container my-1\">\n          <Link to=\"/\">← Back to Products</Link>\n\n          <h2>{currentProduct.name}</h2>\n\n          <p>{currentProduct.description}</p>\n\n          <p>\n            <strong>Price:</strong>${currentProduct.price}{' '}\n            <button onClick={addToCart}>Add to cart</button>\n            <button\n              disabled={!cart.find(p => p._id === currentProduct._id)}\n              onClick={removeFromCart}\n            >\n              Remove from Cart\n            </button>\n          </p>\n\n          <img\n            src={`/images/${currentProduct.image}`}\n            alt={currentProduct.name}\n          />\n        </div>\n      ) : null}\n      {loading ? <img src={spinner} alt=\"loading\" /> : null}\n      <Cart />\n    </>\n  );\n}\n\nexport default Detail;\n","import React from \"react\";\nimport Jumbotron from \"../components/Jumbotron\";\n\nconst NoMatch = () => {\n  return (\n    <div>\n      <Jumbotron>\n        <h1>404 Page Not Found</h1>\n        <h1>\n          <span role=\"img\" aria-label=\"Face With Rolling Eyes Emoji\">\n            🙄\n          </span>\n        </h1>\n      </Jumbotron>\n    </div>\n  );\n};\n\nexport default NoMatch;\n","import { gql } from '@apollo/client';\n\nexport const LOGIN = gql`\n  mutation login($email: String!, $password: String!) {\n    login(email: $email, password: $password) {\n      token\n      user {\n        _id\n      }\n    }\n  }\n`;\n\nexport const ADD_ORDER = gql`\n  mutation addOrder($products: [ID]!) {\n    addOrder(products: $products) {\n      purchaseDate\n      products {\n        _id\n        name\n        description\n        price\n        quantity\n        category {\n          name\n        }\n      }\n    }\n  }\n`;\n\nexport const ADD_USER = gql`\n  mutation addUser(\n    $firstName: String!\n    $lastName: String!\n    $email: String!\n    $password: String!\n  ) {\n    addUser(\n      firstName: $firstName\n      lastName: $lastName\n      email: $email\n      password: $password\n    ) {\n      token\n      user {\n        _id\n      }\n    }\n  }\n`;\n","import React, { useState } from 'react';\nimport { useMutation } from '@apollo/client';\nimport { Link } from 'react-router-dom';\nimport { LOGIN } from '../utils/mutations';\nimport Auth from '../utils/auth';\n\nfunction Login(props) {\n  const [formState, setFormState] = useState({ email: '', password: '' });\n  const [login, { error }] = useMutation(LOGIN);\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    try {\n      const mutationResponse = await login({\n        variables: { email: formState.email, password: formState.password },\n      });\n      const token = mutationResponse.data.login.token;\n      Auth.login(token);\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n  };\n\n  return (\n    <div className=\"container my-1\">\n      <Link to=\"/signup\">← Go to Signup</Link>\n\n      <h2>Login</h2>\n      <form onSubmit={handleFormSubmit}>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"email\">Email address:</label>\n          <input\n            placeholder=\"youremail@test.com\"\n            name=\"email\"\n            type=\"email\"\n            id=\"email\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"pwd\">Password:</label>\n          <input\n            placeholder=\"******\"\n            name=\"password\"\n            type=\"password\"\n            id=\"pwd\"\n            onChange={handleChange}\n          />\n        </div>\n        {error ? (\n          <div>\n            <p className=\"error-text\">The provided credentials are incorrect</p>\n          </div>\n        ) : null}\n        <div className=\"flex-row flex-end\">\n          <button type=\"submit\">Submit</button>\n        </div>\n      </form>\n    </div>\n  );\n}\n\nexport default Login;\n","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { useMutation } from '@apollo/client';\nimport Auth from '../utils/auth';\nimport { ADD_USER } from '../utils/mutations';\n\nfunction Signup(props) {\n  const [formState, setFormState] = useState({ email: '', password: '' });\n  const [addUser] = useMutation(ADD_USER);\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    const mutationResponse = await addUser({\n      variables: {\n        email: formState.email,\n        password: formState.password,\n        firstName: formState.firstName,\n        lastName: formState.lastName,\n      },\n    });\n    const token = mutationResponse.data.addUser.token;\n    Auth.login(token);\n  };\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n  };\n\n  return (\n    <div className=\"container my-1\">\n      <Link to=\"/login\">← Go to Login</Link>\n\n      <h2>Signup</h2>\n      <form onSubmit={handleFormSubmit}>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"firstName\">First Name:</label>\n          <input\n            placeholder=\"First\"\n            name=\"firstName\"\n            type=\"firstName\"\n            id=\"firstName\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"lastName\">Last Name:</label>\n          <input\n            placeholder=\"Last\"\n            name=\"lastName\"\n            type=\"lastName\"\n            id=\"lastName\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"email\">Email:</label>\n          <input\n            placeholder=\"youremail@test.com\"\n            name=\"email\"\n            type=\"email\"\n            id=\"email\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"pwd\">Password:</label>\n          <input\n            placeholder=\"******\"\n            name=\"password\"\n            type=\"password\"\n            id=\"pwd\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row flex-end\">\n          <button type=\"submit\">Submit</button>\n        </div>\n      </form>\n    </div>\n  );\n}\n\nexport default Signup;\n","import React from \"react\";\nimport Auth from \"../../utils/auth\";\nimport { Link } from \"react-router-dom\";\n\n\nfunction Nav() {\n\n  function showNavigation() {\n    if (Auth.loggedIn()) {\n      return (\n        <ul className=\"flex-row\">\n          <li className=\"mx-1\">\n            <Link to=\"/orderHistory\">\n              Order History\n            </Link>\n          </li>\n          <li className=\"mx-1\">\n            {/* this is not using the Link component to logout or user and then refresh the application to the start */}\n            <a href=\"/\" onClick={() => Auth.logout()}>\n              Logout\n            </a>\n          </li>\n        </ul>\n      );\n    } else {\n      return (\n        <ul className=\"flex-row\">\n          <li className=\"mx-1\">\n            <Link to=\"/signup\">\n              Signup\n            </Link>\n          </li>\n          <li className=\"mx-1\">\n            <Link to=\"/login\">\n              Login\n            </Link>\n          </li>\n\n          <li className=\"mx-1\">\n            <Link to=\"/about\">\n              About Us\n            </Link>\n          </li>\n\n        </ul>\n      );\n    }\n  }\n\n  return (\n    <header className=\"flex-row px-1\">\n      <h1>\n        <Link to=\"/\">\n          <span role=\"img\" aria-label=\"shopping bag\">💐</span>\n          SDay\n        </Link>\n</h1>\n      <nav>\n        {showNavigation()}\n      </nav>\n    </header>\n    \n  );\n}\n\nexport default Nav;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport { useQuery } from '@apollo/client';\nimport { QUERY_USER } from '../utils/queries';\n\nfunction OrderHistory() {\n  const { data } = useQuery(QUERY_USER);\n  let user;\n\n  if (data) {\n    user = data.user;\n  }\n\n  return (\n    <>\n      <div className=\"container my-1\">\n        <Link to=\"/\">← Back to Products</Link>\n\n        {user ? (\n          <>\n            <h2>\n              Order History for {user.firstName} {user.lastName}\n            </h2>\n            {user.orders.map((order) => (\n              <div key={order._id} className=\"my-2\">\n                <h3>\n                  {new Date(parseInt(order.purchaseDate)).toLocaleDateString()}\n                </h3>\n                <div className=\"flex-row\">\n                  {order.products.map(({ _id, image, name, price }, index) => (\n                    <div key={index} className=\"card px-1 py-1\">\n                      <Link to={`/products/${_id}`}>\n                        <img alt={name} src={`/images/${image}`} />\n                        <p>{name}</p>\n                      </Link>\n                      <div>\n                        <span>${price}</span>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            ))}\n          </>\n        ) : null}\n      </div>\n    </>\n  );\n}\n\nexport default OrderHistory;\n","import React, { useEffect } from 'react';\nimport { useMutation } from '@apollo/client';\nimport Jumbotron from \"../components/Jumbotron\";\nimport { ADD_ORDER } from '../utils/mutations';\nimport { idbPromise } from \"../utils/helpers\";\n\nfunction Success() {\n    // INITIAL LOGIC\n    const [addOrder] = useMutation(ADD_ORDER);\n\n    useEffect(() => {\n        async function saveOrder() {\n            const cart = await idbPromise('cart', 'get');\n            const products = cart.map(item => item._id);\n\n            if (products.length) {\n                const { data } = await addOrder({ variables: { products } });\n                const productData = data.addOrder.products;\n\n                productData.forEach((item) => {\n                    idbPromise('cart', 'delete', item);\n                });\n            }\n            setTimeout(() => {\n                window.location.assign('/');\n            }, 3000);\n        }\n\n        saveOrder();\n     }, [addOrder]);\n\n    // RETURN JSX \n    return (\n        <div>\n            <Jumbotron>\n                <h1>Success!</h1>\n                <h2>\n                    Thank you for your purchase!\n                </h2>\n                <h2>\n                    You will now be redirected to the homepage\n                </h2>\n            </Jumbotron>\n        </div>\n    );\n};\n\nexport default Success;\n","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  createHttpLink,\n} from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\n\nimport Home from './pages/Home';\nimport Detail from './pages/Detail';\nimport NoMatch from './pages/NoMatch';\nimport Login from './pages/Login';\nimport Signup from './pages/Signup';\nimport Nav from './components/Nav';\nimport { StoreProvider } from \"./utils/GlobalState\";\nimport OrderHistory from './pages/OrderHistory';\nimport Success from './pages/Success';\n\n//TESTING BANNER\nimport Banner from './components/Banner';\n\n\nconst httpLink = createHttpLink({\n  uri: '/graphql',\n});\n\nconst authLink = setContext((_, { headers }) => {\n  const token = localStorage.getItem('id_token');\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : '',\n    },\n  };\n});\n\nconst client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache(),\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <div>\n\n    \n\n          <StoreProvider>\n            <Nav />\n            <Switch>\n              <Route exact path=\"/\" component={Home} />\n              <Route exact path=\"/\" component={Banner} />\n              <Route exact path=\"/login\" component={Login} />\n              <Route exact path=\"/signup\" component={Signup} />\n              <Route exact path=\"/orderHistory\" component={OrderHistory} />\n              <Route exact path=\"/products/:id\" component={Detail} />\n              <Route exact path=\"/success\" component={Success} />\n              <Route component={NoMatch} />\n            </Switch>\n          </StoreProvider>\n        </div>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n  );\n  \n  export function register(config) {\n    if (\n      process.env.NODE_ENV === 'production' &&\n      'serviceWorker' in navigator) {\n      // The URL constructor is available in all browsers that support SW.\n  \n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n      if (publicUrl.origin !== window.location.origin) {\n        // Our service worker won't work if PUBLIC_URL is on a different origin\n        // from what our page is served on. This might happen if a CDN is used to\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n        return;\n      }\n  \n      window.addEventListener('load', () => {\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n  \n        if (isLocalhost) {\n          // This is running on localhost. Let's check if a service worker still exists or not.\n          checkValidServiceWorker(swUrl, config);\n  \n          // Add some additional logging to localhost, pointing developers to the\n          // service worker/PWA documentation.\n          navigator.serviceWorker.ready.then(() => {\n            console.log(\n              'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n            );\n          });\n        } else {\n          // Is not localhost. Just register service worker\n          registerValidSW(swUrl, config);\n        }\n      });\n    }\n  }\n  \n  function registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n      .register(swUrl)\n      .then(registration => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          if (installingWorker == null) {\n            return;\n          }\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the updated precached content has been fetched,\n                // but the previous service worker will still serve the older\n                // content until all client tabs are closed.\n                console.log(\n                  'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                );\n  \n                // Execute callback\n                if (config && config.onUpdate) {\n                  config.onUpdate(registration);\n                }\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // \"Content is cached for offline use.\" message.\n                console.log('Content is cached for offline use.');\n  \n                // Execute callback\n                if (config && config.onSuccess) {\n                  config.onSuccess(registration);\n                }\n              }\n            }\n          };\n        };\n      })\n      .catch(error => {\n        console.error('Error during service worker registration:', error);\n      });\n  }\n  \n  function checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n      headers: { 'Service-Worker': 'script' },\n    })\n      .then(response => {\n        // Ensure service worker exists, and that we really are getting a JS file.\n        const contentType = response.headers.get('content-type');\n        if (\n          response.status === 404 ||\n          (contentType != null && contentType.indexOf('javascript') === -1)\n        ) {\n          // No service worker found. Probably a different app. Reload the page.\n          navigator.serviceWorker.ready.then(registration => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n          // Service worker found. Proceed as normal.\n          registerValidSW(swUrl, config);\n        }\n      })\n      .catch(() => {\n        console.log(\n          'No internet connection found. App is running in offline mode.'\n        );\n      });\n  }\n  \n  export function unregister() {\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.ready\n        .then(registration => {\n          registration.unregister();\n        })\n        .catch(error => {\n          console.error(error.message);\n        });\n    }\n  }\n  ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nserviceWorker.register();\n"],"sourceRoot":""}